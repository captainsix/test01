<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<context:component-scan base-package="com.springbook.biz" />
	
	<!-- 어노테이션 기반의 AOP 설정 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- DataSource 설정  (Apache Commons Connection Pool) -->
	<context:property-placeholder location="classpath:config/database.properties"/>
	
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!-- Transaction 설정 : 트랜잭션 관리자 -->
 	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- Tranaction Advice 설정 -->
	<!-- get으로 시작하는 모든 메소드는 트랜잭션 대상에서 제외하고, 그 외의 모든 메소드는 트랜잭션 관리 대상이 됨 -->
	<!-- 
	name : 트랜잭션 대상 메소드명
	read-only="true" : 트랜잭션 대상에서 제외
	rollback-for : 트랜잭션을 롤백할 예외 지정, no-rollback-for : 트랜잭션을 롤백하지 않을 예외 지정
	-->
 	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- Transaction AOP 설정 -->
 	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="txPointcut"/>
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
	</aop:config>
	
	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	
	
	<!-- ################################################################################################## -->
	
	<!-- AOP 설정 -->
	<!-- 
	1. expression 속성 - execution 안에서 포인트컷의 대상을 설정함
	* com.springbook.biz..*Impl.*(..) 설정 해석 -> 주로 클래스명과 메소드으로 포인트컷을 설정
	- * : 리턴타입, 모든 리턴 타입
	- com.springbook.biz : 패키지 이름
	.. : 패키지 안의 모든 클래스
	*Impl : Impl로 끝나는 클래스
	* : 모든 메소드, get* : get으로 시작하는 메소드
	(..) : 매개변수의 개수와 타입은 관계없이 선택, (*) : 1개인데 타입은 관계없이 선택
	- 추가: 리턴타입 앞에 !을 붙이면 아닌것을 선택
	- 추가: 클래스명 뒤에 +를 붙이면 파생되는 모든 클래스
	
	2. aspect 설정 - 어드바이스 설정, 포인트컷 설정, 어드바이스하는 시점 설정
	어드바이스 시점 5가지
	- before : 어드바이스하는 시점이 포인트컷 메소드 실행 이전
	- after : 어드바이스하는 시점이 포인트컷 메소드 실행 이후, 포인트컷 메소드가 정상적으로 실행될 때와 예외가 발생했을 때 모두 처리
	- after-returning : 어드바이스하는 시점이 포인트컷 메소드 실행 이후, 포인트컷 메소드가 정상적으로 실행되었을 때
	- after-throwing : 어드바이스하는 시점이 포인트컷 메소드 실행 이후, 포인트컷 메소드에서 예외가 발생했을 때
	- around : 어드바이스하는 시점이 포인트컷 메소드 실행 이전과 실행 이후 모두 동작.
	-->
	 
	<!-- XML 기반의 AOP 설정 -->
	<!-- ######################################################################################## -->
	<!-- <bean id="log" class="com.springbook.biz.common.LogAdvice"></bean> -->
	<!-- <bean id="log" class="com.springbook.biz.common.Log4jAdvice"></bean> -->
	<!--
	<bean id="before" class="com.springbook.biz.common.BeforeAdvice"></bean>
	<bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice"></bean>
	<bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"></bean>
	<bean id="after" class="com.springbook.biz.common.AfterAdvice"></bean>
	<bean id="around" class="com.springbook.biz.common.AroundAdvice"></bean>
	 
	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/>
		<aop:pointcut expression="execution(!void com.springbook.biz..*Impl.*(..))" id="voidPointcut"/>
		<aop:aspect ref="around">
			<aop:around pointcut-ref="allPointcut" method="aroundLog"/>
		</aop:aspect>
	</aop:config>
	-->
	
	<!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	
	<!-- ##### 1. xml 기반의 설정 ##### -->
	<!-- 
	[bean 태그의 속성]
	1. 필수 속성
	- class: 빈의 전체 경로, FQN
	2. 선택 속성
	- id: 빈의 이름, 생략하면 클래스 이름에서 첫글자가 소문자로된 빈 이름 생성, id 속성은 생략하면 여러가지 문제가 발생하므로 사용하는 것을 권장.
	- init-method: 객체 생성 후에 멤버변수의 초기화 작업에 사용되는 메소드인 init()메소드를 오버라이딩하여 사용함. 
	- destroy-method: 객체 소멸 전에 호출되는 메소드, 객체에서 사용한 자원을 해제할 때 사용. 
	- lazy-init: 스프링이 구동하는 시점에 빈을 생성할지, 빈이 사용되기 전에 빈을 생성할지의 여부를 판단, true: 빈을 사용하기 전에, false: 스프링이 구동되는 시점에, 기본값: false
	- scope: 빈에 대해서 요청시마다 만들지, 한번만 만들어 사용할지 여부를 판단, singleton: 한번만 만들어 사용 , prototype: 요청할 때마다 빈을 생성, 기본값: singleton
	-->
	
	<!-- LgTV Bean 생성 -->
	<!-- <bean id="tv" class="polymorphism.LgTV"/> -->
	
	<!-- SamsungTV Bean 생성 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod" lazy-init="true"/> -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" scope="prototype"/> -->
	
	
	<!-- 1. 생성자 인젝션  -->
	<!-- 
	1. constructor-arg 요소
	- ref: 객체, value: 기본 데이터, index: 매개변수의 순서, 0번부터 시작
	-->
	<!-- <bean id="tv" class="polymorphism.SamsungTV">
		<constructor-arg ref="sony" index="0"/>
		<constructor-arg value="3000000" index="1"/>
	</bean> -->
	
	<!-- 2. 세터 인젝션 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV">
		<property name="speaker" ref="sony"/>
		<property name="price" value="3000000"/>
	</bean> -->
	
	<!-- 3. 세터 인젝션 - p 네임스페이스 활용 -->
<!-- 	<bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="apple" p:price="4000000"/>
	<bean id="sony" class="polymorphism.SonySpeaker"/>
	<bean id="apple" class="polymorphism.AppleSpeaker"/> -->

	<!-- ##### 2. 어노테이션 기반의 설정 #####  -->
	<!-- <context:component-scan base-package="polymorphism"/> -->
	
	<!-- ##### 3. xml과 어노테이션을 병행하여 설정 ##### -->
<!-- 	<context:component-scan base-package="polymorphism" /> -->
	<!-- <bean id="sony" class="polymorphism.SonySpeaker"/> -->
<!-- 	<bean id="apple" class="polymorphism.AppleSpeaker"/> -->
	
	  
</beans>
